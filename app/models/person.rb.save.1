#ifj -*- encoding : utf-8 -*-
class Person < ActiveRecord::Base

  hobo_model # Don't put anything above this

  fields do
    first_name   :string #, :required
    last_name    :string #, :required
    name         :string
    street       :string
    city         :string
    zip_code     :string
    country      :string
    klink        :string
    born_at      :date
    mothers_name :string
    mothers_name_alternate :string # ha megtal√°ltuk, de nem biztos, h ≈ë az, akkor ide tessz√ºk complex-b≈ël
    complexed_at :date
    interpersonal_relations_count :integer, :default => 0
    person_to_org_relations_count :integer, :default => 0
    search_result_count           :integer, :default => 0
    relations_counter             :integer, :default => 0
    relations_bit                 :boolean, :default => false
    complex_xml :text
    timestamps
    address :string
    order_name :string, :index => true
  end

  default_scope  :order => 'order_name' 

  named_scope :info, lambda { |info_ids| info_ids.present? ? { :conditions => [ "people.information_source_id in (?)", info_ids ]} : {} }

  before_save do |r|
    r.normalize_name
    r.clean_name
    if r.name
      r.order_name = r.name
      (%w{id. ifj. dr. Dr. DR. 'Prof dr.'} + ['ifj ', 'id ', 'dr ', 'Dr ', 'DR ', 'Prof dr']).each do |pre|
        if r.name[0..pre.size-1] == pre
          r.order_name = r.name[pre.size..-1].strip + ' ' + pre
        end
      end
    end
=begin
    Person.update_counters r.id, :interpersonal_relations_count => -r.interpersonal_relations_count + (isize = r.interpersonal_relations.count)
    Person.update_counters r.id, :person_to_org_relations_count => -r.person_to_org_relations_count + (psize = r.person_to_org_relations.count)
    r.relations_counter = isize + psize
    r.relations_bit = true if r.relations_counter > 0
=end
    if r.zip_code.blank? and r.city.blank? and r.street.blank?
      r.address = " "
    else
      r.address = "#{r.zip_code} #{r.city}, #{r.street}" 
    end
  end

  belongs_to :selected_organization, :class_name => "Organization"

  validates_presence_of :information_source

  has_many :person_grade_assocs
  has_many :person_grades, :through => :person_grade_assocs, :accessible => true

  belongs_to :place_of_birth

  # ez az √∂sszes kapcsolat, azok is, amit a rendszer gener√°lt
  has_many :interpersonal_relations, :accessible => true
  has_many :people, :through => :interpersonal_relations, :source => :related_person

  # ezek csak a k√©zzel bevitt kapcsolatok
  has_many :personal_relations, :conditions => [ "internal = ?", false], :class_name => "InterpersonalRelation", :accessible => true

  # helperek a vizualic√°zi√≥s r√©szhez
  has_many :personal_non_litigation_relations, :conditions => [ "interpersonal_relations.visual = ?", true], :class_name => "InterpersonalRelation"
  has_many :personal_litigation_relations, :conditions => [ "interpersonal_relations.visual = ?", false], :class_name => "InterpersonalRelation"
  has_many :person_to_org_non_litigation_relations, :conditions => [ "person_to_org_relations.visual = ?", true], :class_name => "PersonToOrgRelation"
  has_many :person_to_org_litigation_relations, :conditions => [ "person_to_org_relations.visual = ?", false], :class_name => "PersonToOrgRelation"


  # helperek adminhoz
  has_many :manual_interpersonal_relations, :conditions => [ "interpersonal_relations.parsed = ?", false], :class_name => "InterpersonalRelation", :accessible => true
  has_many :manual_person_to_org_relations, :conditions => [ "person_to_org_relations.parsed = ?", false], :class_name => "PersonToOrgRelation", :accessible => true

  has_many :person_to_org_relations, :accessible => true, :order => "organization_id"

  has_many :organizations, :through => :person_to_org_relations

  belongs_to :information_source
  belongs_to :user, :creator => true

  has_many :person_histories

  belongs_to :merge_from, :class_name => "Person"
  
  def to_param
    "#{id}-#{name.to_textual_id}"
  end

  def address
    if zip_code.blank? and city.blank? and street.blank?
      " "
    else
      "#{zip_code} #{city}, #{street}"
    end
  end


  def self.merge into_this, this

#    this.person_grade_assocs.each      { |f| f.person_id = into_this.id; f.save(false) }
# we check whether the person_grade already associated with our into.this person
    this.person_grade_assocs.each      { |f|
    grade = PersonGradeAssoc.find_by_person_id_and_person_grade_id( into_this.id, f.person_grade_id)
    if !grade
        f.person_id = into_this.id; f.save(false)
    end
   }
    this.interpersonal_relations.each  { |f| f.person_id = into_this.id; f.save(false) }
    this.person_to_org_relations.each  { |f| f.person_id = into_this.id; f.save(false) }
    this.person_histories.each         { |f| f.person_id = into_this.id; f.save(false) }
    into_this.save(false)

#   this.person_grade_assocs.destroy_all
#   this.person_to_org_relations.destroy_all
#   this.interpersonal_relations.destroy_all
#   this.person_histories.destroy_all
    this.reload
#    this.destroy

  end


  def min_ind arrt
	
	ind = 0
       res = 0
      
       arr = arrt.map{|arrt| arrt.to_i}
       min = arr.at(0)
       while ind < arr.count

          #if min.to_s.to_i > arr.at(ind).to_s.to_i
           if min > arr.at(ind)
             res = ind
             min = arr.at(ind)
          end
          ind = ind + 1
       end
       return res
  end
  
  def find_path a, target , level=3, res=[self]
    tocheck = Array.new
    distances = Array.new
    all_distances = Array.new
    checked = Array.new    
    parents = Array.new
    elements = Array.new    
    tocheck << a
    distances << 0
    all_distances << 0
    parents << a
    elements << a
    # checked << ['argh']
    while tocheck.count > 0
       mind = min_ind distances
       checked_element=tocheck.at(mind)
       checked_dist = distances.at(mind).to_s.to_i
       tocheck.delete_at(mind)
       distances.delete_at(mind)
       checked << checked_element
#       checked_element.people.each do |p|
        checked_element.people.each do |p|
		if !checked.include? p

                 if tocheck.include? p
                    i = elements.index(p)
                    d = all_distances.at(i).to_s.to_i
                    nd =  (checked_dist + 1)
                    if  d > nd
                        all_distances[i] = nd
                        ii =  tocheck.index(p)
                        distances[ii] = nd
                    end
                 else
                    tocheck << p
                    distances << (checked_dist + 1)
                    all_distances << (checked_dist + 1)
                    elements << p
                    parents << checked_element
                 end
              if p == target
                     it = elements.index(p)
                     par =  parents[it]
                     retarr = Array.new
                     retarr << p
                     while par != a
		          retarr << par
                        it = elements.index(par)
                        par =  parents[it]
                     end
                     retarr = retarr.reverse
		#	@this << res + [p]	
                     @this << res + retarr	
                     return
              end
       end
              
		

       end         
    end
    
    @this << "nincs"
    

  end

=begin
  def find_path a, target, level=3, res=[self]


    return if level == 0
    a.people.each do |p|
      if p == target
        @this << res + [p]
        return
      end
      if !res.include?(p)
        find_path a, target, level-1, ( res + [p] )
      end
    end

  end
=end

  def path_to b
    results = ""
    @this = []
    find_path self, b
    if @this[0].to_s == "nincs"
      results = "Nincsen kapcsolat!"
    else
      #@this.sort! { |a,b| a.size <=> b.size }
      k = @this[0]
      #@this = []
      #@this << k
      #results = @this[0]
      #results = "Van kapcsolat!"
      #@this.each do |w| results + w end
      #results = @this[0].count
      #@this[0].each do |w| results << w.*.linked_name.join('  >  ') + "<br/><br/>" end
      #@this[0].each do |w| results << w.name.to_s + "<br/><br/>" end
      @this[0].each do |w| results << w.linked_name + " <-> " +"<br/><br/>" end
      #@this[0].each do |w| results << w.to_s  + "<br/><br/>" end
      results << "" 
      #results = @this
    end   
   end

  def linked_name
    "<a style='color: #6EA4B0' target='_blank' href='/people/#{id}'>#{name}</a>"
    # "naa"
    # css nem tom miÈrt nem muxik
  end

  def normalize_name
    if last_name
      self.name = last_name.to_s.strip + ' ' + first_name.to_s.strip
      if born_at and born_at.year == Time.now.year
        self.born_at = nil
      end
    else
      if name
        names = name.split(' ')
        self.last_name = names[0]
        self.first_name = names[1..-1].join(' ') if names[1]
      end
    end
  end

  def clean_name
    birosag = InformationSource.find_by_name("birosag.hu")
    if name and information_source_id == birosag.id
      puts name.inspect
      exclude = ["( dr.Szunyogh Val√©ri√°val egy√ºtt)", "( egy√ºttesen )", "( eln√∂k )", "( √∂n√°ll√≥an )", "(a kurat√≥riumi eln√∂kkel egy√ºttesen)", "(alkalmazott)", "(egy√ºttesen)", "(eln√∂k) √∂n√°ll√≥an", "(ketten egy√ºtt)", "(√∂n√°ll√≥)", "/ egy√ºttesen", "/ egy√ºttesen", "/ eln.tag", "/ Eln√∂k kett√∂ egy√ºt", "/ eln√∂k √∂n√°ll√≥an", "/ eln√∂khelyettes", "/ ketten egy√ºtt", "/ kett≈ë egy√ºtt", "/ √∂n√°ll√≥an", "/ p√©nzt√°ros", "/ titk√°r", "/egy√ºtt", "/egy√ºttesen/ *! **!", "/Eln√∂kh. kett√∂ egy√ºtt", "/kett√∂ e", "/√∂n√°ll√≥an", "/√∂n√°ll√≥an", "a kurat√≥rium eln√∂ke", "a kurat√≥rium titk√°ra", "aleln√∂k", "aleln√∂k", "aleln√∂k (egy√ºttesen)", "aleln√∂k (elej√©n is)", "aleln√∂k eln√∂kkel egy√ºtt", "√°ltal k√©pviselt tulajdonk√∂z√∂ss√©g", "az √úgyvezet≈ë Test√ºlet eln√∂ke", "az √úgyvezet≈ë Test√ºlet tagja", "d√∂nt≈ëbizotts√°gi tag", "d√∂nt≈ëbizotts√°gi tag", "egy√ºtt", "egy√ºttesen", "eln./√∂n√°ll.", "eln√∂k", "eln√∂k - igazgat√≥", "eln√∂k akad√°ly eset√©n", "eln√∂k √∂n√°ll√≥", "eln√∂k √∂n√°ll√≥an", "eln√∂kh.", "eln√∂khelyettes", "eln√∂kkel egy√ºtt", "eln√∂ks√©gi tag", "√©rt√©kes√≠t√©si √©s marketing igazgat√≥", "√©s egy t√°rsa", "√©s t√°rsai", "√©s t√°rsai", "forgalmi √ºzemm√©rn√∂k - √ºzemigazgat√≥ helyettes", "f≈ëtitk√°r", "gazdas√°gi f≈ëmunkat√°rs", "gazdas√°gi vez√©rigazgat√≥-helyettes", "igazgat√≥s√°gi", "igazgat√≥s√°gi tag", "IT eln√∂k", "IT tag", "It.tag/m√°sik tagga", "k√©pviseleti joga a 16.Pk.61.042/2003/13. sz. v√©gz√©s alapj√°n sz√ºnetel", "ketten egy√ºtt", "kett≈ë egy√ºtt", "k√∂z√∂s", "k√∂z√∂s k√©pvisel≈ë", "k√∂z√∂s k√©pvisel≈ë √©s 4 t√°rsa", "k√∂z√∂s t√∂rzsbet√©t k√©pvisel≈ë", "kurat√≥riumi eln√∂k", "kurat√≥riumi tag", "kurat√≥riumi titk√°r", "m√°s munkav√°llal√≥", "munkav√°llal√≥", "√∂n√°ll√≥", "√∂n√°ll√≥an", "sz√°llodaigazgat√≥", "szervez√©si eln√∂khelyettes", "tag+m√°sik 2 tag", "t√°rseln√∂k", "titk√°r", "√ºgyint√©≈ëz t√°rseln√∂k", "√ºgyvezet≈ë", "√ºgyvezet≈ë eln√∂k", "√ºzletr√©sz k√©pv."]
      if !exclude.include?(name) # ha a n√©v pont uganaz, mint a kiveend≈ë, sz√∂veg, akkor ne foglalkozzunk vele
        exclude.each do |w|
          if name.include?( w )
            s = name.split( w )
            self.name = s[0]
            self.name = s[1] if s[1] and s[1].size > s[0].size
            self.last_name = nil
            normalize_name
            PersonToOrgRelation.information_source_id_is(birosag.id).person_id_is(id).each do |rel|
              rel.role = w
              rel.save
            end  
          end
        end
      end
    end
  end

  # --- Permissions --- #
  def create_permitted?
    acting_user.administrator? || (acting_user.editor? && user.id == acting_user.id)
  end

  def update_permitted?
    acting_user.administrator? || acting_user.editor? || acting_user.supervisor?
  end

  def destroy_permitted?
    acting_user.administrator? || acting_user.supervisor? || acting_user.editor?
  end


  def view_permitted?(field)
    true
  end

end

